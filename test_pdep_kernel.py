import unittest
from pablo import swizzle, apply_pdep


class TestPDEPKernel(unittest.TestCase):
    """ 
    Hard-coded inputs and expected outputs are taken directly from the values given to and
    returned from the Parabix PDEP kernel.

    The kernel accepts swizzled input, processes the swizzles, and outputs swizzled streams. 
    The Python accepts unswizzled input, applies PDEP to each stream, and returns the result. The
    result is then swizzled and compared to the output of the kernel.
    """
    def test_wctest(self):
        """ Verifies the behaviour of the Parabix PDEP kernel when the pdep kernel pipeline
        is passed wctest.txt as input.
        """
        #apply_pdep(bp_bit_streams, bp_stream_idx, pdep_marker_stream, source_bit_stream)

        input_streams = [
            int('0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000100000000100000000010000000000010000000001001000000001000010000000100010000100000100001010001', 2),
            int('0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000010000000000100000', 2),
            int('0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000010000000010000000001000000000001000000000100100000000000001000000010001000000000010000001000', 2),
            int('1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111011111111111111111101111111101111111110111111111110111111111011011111111111110111111101110111111111101111110111', 2)
            ]
        num_input_streams = len(input_streams)
        pdep_ms = int('0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000', 2)
        output_streams = [0] * num_input_streams
        for i in range(num_input_streams):
            apply_pdep(output_streams, i, pdep_ms, input_streams[i])

        swizzled_results = swizzle(output_streams, num_input_streams)
        swizzled_results = [bin(x) for x in swizzled_results]
        expected_results = [
            '0b0',
            '0b0',
            '0b0',
            '0b10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000']
    
        self.assertEquals(expected_results, swizzled_results)


# input
# 11111100 11100000 11000000 11111000
#output
# 11111100111111001111110011111100
# 11100000111000001110000011100000
# 11000000110000001100000011000000
# 11111000111110001111100011111000

# results = swizzle([
#         int('11111100111000001100000011111000', 2),
#         int('11111100111000001100000011111000', 2),
#         int('11111100111000001100000011111000', 2),
#         int('11111100111000001100000011111000', 2),
#     ], 4, 32)

#     for result in results:
#         print(bin(result))